package loader

import (
	typesm "authentication_service/notification_service/types"
	"fmt"
	"html/template"
	"log"
	"os"
)

func LoadMailTemplates() *typesm.TemplatesMailSystem {
	templatesMailObj := &typesm.TemplatesMailSystem{}
	basePath := "loader/mail-template"
	mailTemplatesNameMap := map[string]string{
		"NewDeviceInfoTemplate": "new-device-info.html",
	}

	for key, value := range mailTemplatesNameMap {
		pathTemplate := fmt.Sprintf("%s/%s", basePath, value)
		if _, err := os.Stat(pathTemplate); err != nil { // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
			log.Println("üî¥ Failed to find mail template:", key, err)
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
		}
		fileBytes, err := os.ReadFile(pathTemplate) // –ò—Å–ø–æ–ª—å–∑—É–µ–º os.ReadFile
		if err != nil {
			log.Println("üî¥ Failed to load mail template:", key, err)
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
		}
		t, err := template.New(key).Parse(string(fileBytes))
		if err != nil {
			log.Println("üî¥ Failed to load mail template:", key, err)
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å
		}
		switch key {
		case "NewDeviceInfoTemplate":
			templatesMailObj.NewDeviceInfoTemplate = t
		}
	}
	return templatesMailObj
}
