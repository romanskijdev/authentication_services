linters-settings:
  errcheck: # Настройки для линтера errcheck, который проверяет, что ошибки не игнорируются
    check-type-assertions: true # Не проверять утверждения типов на ошибки
    check-blank: true # Проверять игнорирование ошибок через присваивание в _
  prealloc: # Настройки для линтера prealloc, который предлагает предварительное выделение памяти для срезов
    simple: true # Простой режим, предлагает предварительное выделение для простых циклов
    range-loops: true # Предлагает предварительное выделение для циклов range
    for-loops: false # Не предлагает предварительное выделение для обычных for-циклов
  gocyclo: # Настройки для линтера gocyclo, который проверяет сложность функций
    min-complexity: 10 # Установите порог сложности, который считаете приемлемым

linters:
  enable: # Список линтеров, которые будут включены
    - noctx # Находит отправку HTTP-запроса без контекста.Контекст.
    - protogetter # Сообщает о прямом чтении из полей прото-сообщения, когда следует использовать геттеры.
    - reassign # Проверяет, что переменные пакета не переназначаются.
    - rowserrcheck 	# Проверяет, успешно ли проверен Rows.Err строк.
    - sqlclosecheck # Проверяет, что sql.Rows, sql.Stmt, sqlx.NamedStmt, pgx.Query закрыты.
    - ineffassign # Обнаруживает, когда назначения существующим переменным не используются.
    - nilerr # Находит код, который возвращает ноль, даже если он проверяет, что ошибка не равна нулю.
    - makezero  # Проверяет, что нулевые значения создаются правильно
    - gochecksumtype # Проверяет, что тип контрольной суммы в go.sum соответствует содержимому
    - exportloopref # Проверяет, что циклические зависимости пакетов не имеют экспортируемых идентификаторов
    - exhaustive # Проверьте полноту операторов перечисления.
    - errchkjson # Проверяет типы, передаваемые функциям кодирования JSON. Сообщает о неподдерживаемых типах и событиях, при которых проверку возвращаемой ошибки можно опустить.
    - durationcheck # Проверяет, что длительность таймаута не равна 0
    - contextcheck # Проверяет, что контекст не игнорируется
    - bodyclose # Проверяет, что тело запроса закрывается
    - bidichk  # Проверяет, что строки в исходном коде не содержат символов из разных языков
    - govet # Проверяет код на наличие конструкций, которые могут быть ошибочными
    - errcheck # Проверяет, что ошибки не игнорируются
    - staticcheck # Статический анализ кода, находит ошибки, неэффективные конструкции и т.д.
    - unused # Проверяет на неиспользуемые переменные, функции, константы
    - gocritic # Линтер, основанный на проверке кода на соответствие определенным критериям качества и стиля
    - stylecheck # Проверяет стиль кодирования
    - whitespace # Проверяет проблемы с пробелами в коде
    - gosec # Линтер gosec, который проверяет код на наличие потенциальных уязвимостей
    - prealloc # Предлагает предварительное выделение памяти для срезов

    - dupl # Находит дублирующийся код
    - gocyclo # Проверяет сложность функций
    - ineffassign # Обнаруживает неэффективные присваивания
    - unparam # Находит неиспользуемые параметры функций
    
    - gosimple # Предлагает упрощения кода

  disable: # Список линтеров, которые будут отключены
    - gofumpt # Более строгая версия gofmt, применяет дополнительные правила форматирования
    # - golint # Отключает golint, который проверяет стиль написания кода на Go

run:
  timeout: 15m # Устанавливает тайм-аут для выполнения всех линтеров