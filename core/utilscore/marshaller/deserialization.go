package marshallerutils

import (
	"math/big"
	"net"
	"time"

	"github.com/shopspring/decimal"
	"github.com/sirupsen/logrus"
	"google.golang.org/protobuf/types/known/timestamppb"
	"google.golang.org/protobuf/types/known/wrapperspb"
)

type Deserialization struct{}

func InitDeserializationUtils() *Deserialization {
	return &Deserialization{}
}

func (m *Deserialization) OptionalIP(pbStr *wrapperspb.StringValue) *net.IP {
	if pbStr != nil {
		ip := net.ParseIP(pbStr.Value)
		if ip != nil {
			return &ip
		}
	}
	return nil
}

func (m *Deserialization) OptionalBool(pbBool *wrapperspb.BoolValue) *bool {
	if pbBool != nil {
		return &pbBool.Value
	}
	return nil
}

func (m *Deserialization) OptionalInt64(pbInt64 *wrapperspb.Int64Value) *int64 {
	if pbInt64 != nil {
		return &pbInt64.Value
	}
	return nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è google.protobuf.UInt64Value –≤ *big.Int
func (m *Deserialization) OptionalBigInt(pbUInt64 *wrapperspb.UInt64Value) *big.Int {
	if pbUInt64 != nil {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π big.Int –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
		return big.NewInt(0).SetUint64(pbUInt64.Value)
	}
	return nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è *string –ø–æ–ª—è
func (m *Deserialization) OptionalString(pbStr *wrapperspb.StringValue) *string {
	if pbStr != nil {
		return &pbStr.Value
	}
	return nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è *float64 –ø–æ–ª—è
func (m *Deserialization) OptionalFloat64(pbFloat64 *wrapperspb.DoubleValue) *float64 {
	if pbFloat64 != nil {
		return &pbFloat64.Value
	}
	return nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è *uint64 –ø–æ–ª—è
func (m *Deserialization) OptionalUint64(pbUint64 *wrapperspb.UInt64Value) *uint64 {
	if pbUint64 != nil {
		return &pbUint64.Value
	}
	return nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è *uint32 –ø–æ–ª—è
func (m *Deserialization) OptionalUint32(pbUint8 *wrapperspb.UInt32Value) *uint32 {
	if pbUint8 != nil {
		value := uint32(pbUint8.Value)
		return &value
	}
	return nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è *time.Time –ø–æ–ª—è
func (m *Deserialization) OptionalTime(pbTime *timestamppb.Timestamp) *time.Time {
	if pbTime != nil {
		val := pbTime.AsTime()
		return &val
	}
	return nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è *wrapperspb.StringValue –ø–æ–ª—è
func (m *Deserialization) OptionalStringTimeOnlyDate(pbTime *wrapperspb.StringValue) *string {
	if pbTime != nil {
		// –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤ time.Time
		parsedTime, err := time.Parse("2006-01-02", pbTime.GetValue())
		if err != nil {
			logrus.Errorln("üî¥ error OptionalStringTimeOnlyDate:parsedTime: ", err)
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å nil –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
			return nil
		}
		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ "yyyy-mm-dd"
		val := parsedTime.Format("2006-01-02")
		return &val
	}
	return nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è *decimal.Decimal –ø–æ–ª—è
func (m *Deserialization) OptionalDecimal(pbDecimal *wrapperspb.StringValue) *decimal.Decimal {
	if pbDecimal != nil {
		dec, err := decimal.NewFromString(pbDecimal.Value)
		if err != nil {
			return nil
		}
		return &dec
	}
	return nil
}
