package pgxpoolmodule

import (
	"context"
	"errors"
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/jackc/pgx/v5/pgxpool"
)

type ConfigConnectPgxPool struct {
	Host     string
	Port     string
	User     string
	Password string
	Name     string
	SSLMode  string
}

var (
	pool *pgxpool.Pool
	once sync.Once
)

func ConnectDB(configObj *ConfigConnectPgxPool) (*pgxpool.Pool, error) {
	var err error
	once.Do(func() {
		if configObj == nil {
			err = errors.New("ConnectDB: configObj is nil")
			return
		}

		log.Println("üöÄ ConnectDB")
		sslMode := "disable"
		if configObj.SSLMode != "" {
			sslMode = configObj.SSLMode
		}

		// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ disable –∏ require
		if sslMode != "disable" && sslMode != "require" {
			err = errors.New("ConnectDB: unsupported sslmode, only 'disable' and 'require' are allowed")
			return
		}

		log.Println("üöÄ sslMode: ", sslMode)
		connStr := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=%s target_session_attrs=read-write",
			configObj.Host,
			configObj.Port,
			configObj.User,
			configObj.Password,
			configObj.Name,
			sslMode)

		configDB, err := pgxpool.ParseConfig(connStr)
		if err != nil {
			err = errors.New("ConnectDB: failed to parse config: " + err.Error())
			return
		}

		// –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞
		configDB.MaxConns = 2                         // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
		configDB.MinConns = 1                         // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –ø—É–ª –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å
		configDB.MaxConnLifetime = time.Second * 45   // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ
		configDB.MaxConnIdleTime = time.Second * 45   // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –æ–Ω–æ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ
		configDB.HealthCheckPeriod = time.Second * 15 // –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ

		pool, err = pgxpool.NewWithConfig(context.Background(), configDB)
		if err != nil {
			err = errors.New("ConnectDB: failed to connect to database: " + err.Error())
			return
		}
	})

	if err != nil {
		return nil, err
	}

	if pool == nil {
		return nil, errors.New("ConnectDB: failed to connect to database: pool is nil")
	}

	return pool, nil
}
