package rabbitmqlib

import (
	"fmt"

	"github.com/sirupsen/logrus"
)

// DeclareQueue –¥–µ–∫–ª–∞—Ä–∏—Ä—É–µ—Ç exchange –∏ –æ—á–µ—Ä–µ–¥—å, –∞ –∑–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç binding.
func (c *ConnectionRabitMq) DeclareQueue(queueName, exchange, bindingKey string) error {
	ch, err := c.getChannel()
	if err != nil {
		return fmt.Errorf("üî¥ error: failed to create channel for declaration: %w", err)
	}
	defer func() {
		if err := ch.Close(); err != nil {
			logrus.Errorf("üî¥ error: failed to close declaration channel: %v", err)
		} else {
			logrus.Info("‚ö™ Declaration channel successfully closed")
		}
	}()

	if err = ch.ExchangeDeclare(
		exchange, // –ò–º—è exchange.
		"direct", // –¢–∏–ø exchange.
		true,     // Durable.
		false,    // Auto-deleted.
		false,    // Internal.
		false,    // No-wait.
		nil,      // Arguments.
	); err != nil {
		return fmt.Errorf("üî¥ error: failed to declare exchange: %w", err)
	}

	q, err := ch.QueueDeclare(
		queueName, // –ò–º—è –æ—á–µ—Ä–µ–¥–∏.
		true,      // Durable.
		false,     // Delete when unused.
		false,     // Exclusive.
		false,     // No-wait.
		nil,       // Arguments.
	)
	if err != nil {
		return fmt.Errorf("üî¥ error: failed to declare queue: %w", err)
	}

	if err = ch.QueueBind(
		q.Name,     // –ò–º—è –æ—á–µ—Ä–µ–¥–∏.
		bindingKey, // Routing key.
		exchange,   // Exchange.
		false, nil,
	); err != nil {
		return fmt.Errorf("üî¥ error: failed to bind queue: %w", err)
	}

	// TODO: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	logrus.Infof("‚ö™ Successfully declared and bound queue: queueName=%s, exchange=%s, bindingKey=%s", queueName, exchange, bindingKey)
	return nil
}
