package rabbitmqlib

import (
	"fmt"
	"log"
	"sync"

	"github.com/rabbitmq/amqp091-go"
)

const (
	ConsumerCountParam = 3
)

// ConsumerRabitMq –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π.
type ConsumerRabitMq struct {
	Conn        *ConnectionRabitMq // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ RabbitMQ.
	WorkerCount int                // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤.
	channels    []*amqp091.Channel // –ü—É–ª –∫–∞–Ω–∞–ª–æ–≤.
	channelLock sync.Mutex         // Mutex –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—É–ª—É –∫–∞–Ω–∞–ª–æ–≤.
	currentChan int                // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è round-robin.
}

func newConsumer(conn *ConnectionRabitMq, workerCount int) *ConsumerRabitMq {
	consumer := &ConsumerRabitMq{
		Conn:        conn,
		WorkerCount: workerCount,
		channels:    make([]*amqp091.Channel, workerCount),
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –∫–∞–Ω–∞–ª–æ–≤.
	for i := 0; i < workerCount; i++ {
		ch, err := conn.getChannel()
		if err != nil {
			log.Printf("üî¥ error: failed to create channel %d: %v", i, err)
			continue
		}
		consumer.channels[i] = ch
	}
	return consumer
}

// Consume –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è handler.
func (c *ConsumerRabitMq) Consume(
	queue string, // –ò–º—è –æ—á–µ—Ä–µ–¥–∏.
	consumerTag string, // –¢–µ–≥ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è.
	handler func(amqp091.Delivery), // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
) error {
	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
	for i := 0; i < c.WorkerCount; i++ {
		go func(workerID int) {
			defer func() {
				if r := recover(); r != nil {
					log.Printf("Recovered in consumer worker %d: %v", workerID, r)
				}
			}()

			// –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –∏–∑ –ø—É–ª–∞.
			ch := c.getChannel(workerID)
			if ch == nil {
				log.Printf("üî¥ error: channel is nil for worker %d", workerID)
				return
			}

			// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ.
			msgs, err := ch.Consume(
				queue,
				fmt.Sprintf("%s-%d", consumerTag, workerID),
				false, // auto-ack –æ—Ç–∫–ª—é—á–µ–Ω
				false,
				false,
				false,
				nil,
			)
			if err != nil {
				log.Printf("üî¥ error: failed to start consuming on worker %d: %v", workerID, err)
				return
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è.
			log.Printf("‚úÖ Started consumer worker %d", workerID)
			for d := range msgs {
				safeHandler(d, handler)
			}
			log.Printf("üî¥ Consumer worker %d stopped", workerID)
		}(i)
	}
	return nil
}

// getChannel –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ –ø—É–ª–∞, –∏—Å–ø–æ–ª—å–∑—É—è round-robin.
func (c *ConsumerRabitMq) getChannel(workerID int) *amqp091.Channel {
	c.channelLock.Lock()
	defer c.channelLock.Unlock()

	channelIndex := workerID % len(c.channels)
	if c.channels[channelIndex] == nil {
		log.Printf("üî¥ error: channel %d is nil", channelIndex)
		return nil
	}
	return c.channels[channelIndex]
}

// safeHandler –≤—ã–∑—ã–≤–∞–µ—Ç handler –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—É—é –ø–∞–Ω–∏–∫—É.
func safeHandler(d amqp091.Delivery, handler func(amqp091.Delivery)) {
	defer func() {
		if r := recover(); r != nil {
			log.Printf("Recovered in handler: %v", r)
		}
	}()
	handler(d)
}

// ConsumeSimple –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –≤ handler —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
// Handler –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å error, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.
func (c *ConsumerRabitMq) ConsumeSimple(
	queue string, // –ò–º—è –æ—á–µ—Ä–µ–¥–∏.
	consumerTag string, // –¢–µ–≥ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è.
	handler func([]byte) error, // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è) —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –æ—à–∏–±–∫–∏.
) error {
	return c.Consume(queue, consumerTag, func(d amqp091.Delivery) {
		if err := handler(d.Body); err != nil {
			log.Printf("üî¥ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			if nackErr := d.Nack(false, true); nackErr != nil {
				log.Printf("üî¥ –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", nackErr)
			}
			return
		}

		if err := d.Ack(false); err != nil {
			log.Printf("üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
	})
}
