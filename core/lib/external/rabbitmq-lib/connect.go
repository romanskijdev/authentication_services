package rabbitmqlib

import (
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/rabbitmq/amqp091-go"
)

var (
	clientInstance *ConnectionRabitMq
	once           sync.Once
)

// ConnectParams —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ.
type ConnectParams struct {
	Host     string // –ê–¥—Ä–µ—Å —Ö–æ—Å—Ç–∞ RabbitMQ.
	Port     int    // –ü–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
	Username string // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	Password string // –ü–∞—Ä–æ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
}

// ConnectionRabitMq –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ RabbitMQ.
type ConnectionRabitMq struct {
	Conn *amqp091.Connection
}

// ConnectRabitMq —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ ConnectParams.
// –ü—Ä–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–µ—Ä–∏—è –∏–∑ 3-—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30 —Å–µ–∫—É–Ω–¥.
// –ü–æ—Å–ª–µ Dial –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∏–Ω–≥-–ø—Ä–æ–≤–µ—Ä–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª).
// –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏.
func ConnectRabitMq(params ConnectParams) (*ConnectionRabitMq, error) {
	var err error
	once.Do(func() {
		const maxAttempts = 3
		for attempt := 1; attempt <= maxAttempts; attempt++ {
			amqpURL := fmt.Sprintf("amqp://%s:%s@%s:%d/", params.Username, params.Password, params.Host, params.Port)
			conn, dialErr := amqp091.Dial(amqpURL)
			if dialErr != nil {
				err = fmt.Errorf("üî¥ error: dial failed: %w", dialErr)
			} else {
				// Ping-–ø—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –∏ —Å—Ä–∞–∑—É –µ–≥–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º.
				ch, pingErr := conn.Channel()
				if pingErr != nil {
					err = fmt.Errorf("üî¥ error: ping check failed: %w", pingErr)
					_ = conn.Close()
				} else {
					_ = ch.Close()
					log.Println("‚úÖ Successfully connected to RabbitMQ and ping check passed!")
					clientInstance = &ConnectionRabitMq{Conn: conn}
					err = nil
					break
				}
			}
			log.Printf("‚è∞ Attempt %d/%d: failed to connect to RabbitMQ: %v", attempt, maxAttempts, err)
			if attempt < maxAttempts {
				log.Printf("‚è≥ Retrying in 30 seconds...")
				time.Sleep(30 * time.Second)
			}
		}
		if clientInstance == nil && err != nil {
			err = fmt.Errorf("üî¥ error: failed to connect after %d attempts: %w", maxAttempts, err)
		}
	})
	return clientInstance, err
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
func (c *ConnectionRabitMq) Close() error {
	if c.Conn != nil {
		return c.Conn.Close()
	}
	return nil
}

// getChannel –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
func (c *ConnectionRabitMq) getChannel() (*amqp091.Channel, error) {
	if c.Conn == nil {
		return nil, fmt.Errorf("connection is nil")
	}
	return c.Conn.Channel()
}
