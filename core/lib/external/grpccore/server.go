package grpccore

import (
	"authentication_service/core/variables"
	"crypto/tls"
	"crypto/x509"
	"fmt"
	"os"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/keepalive"
)

// CreateGRPCSystemCertPoolOptions_x509 —Å–æ–∑–¥–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è gRPC –∫–ª–∏–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã x509
func CreateGRPCSystemCertPoolOptions_x509(certPathsClient []string, useClientCertificatesTLS bool) ([]grpc.DialOption, error) {
	// logrus.Info("üü® CreateGRPCSystemCertPoolOptions_x509")
	var err error
	var optionsGrpc []grpc.DialOption

	// –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã TLS
	if useClientCertificatesTLS {
		// –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
		if certPathsClient != nil {
			certPool := x509.NewCertPool() // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
			// –¶–∏–∫–ª –ø–æ –≤—Å–µ–º –ø—É—Ç—è–º –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
			for _, certPath := range certPathsClient {
				var cert []byte
				// –ß—Ç–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
				if cert, err = os.ReadFile(certPath); err == nil {
					// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ –ø—É–ª
					resultAddCertificate := certPool.AppendCertsFromPEM(cert)
					// –ï—Å–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—É–ª, –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏
					if !resultAddCertificate {
						fmt.Printf("Error failed to append cert to pool from %s: %s\n", certPath, err)
					}
				}
			}
			// –°–æ–∑–¥–∞–Ω–∏–µ TLS credentials —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—É–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
			creds := credentials.NewTLS(&tls.Config{RootCAs: certPool})
			// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ TLS credentials –≤ –æ–ø—Ü–∏–∏ gRPC
			optionsGrpc = []grpc.DialOption{grpc.WithTransportCredentials(creds)}
		} else {
			// –ï—Å–ª–∏ –ø—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—É–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
			var systemRoots *x509.CertPool
			if systemRoots, err = x509.SystemCertPool(); err == nil {
				optionsGrpc = []grpc.DialOption{grpc.WithTransportCredentials(credentials.NewTLS(&tls.Config{RootCAs: systemRoots}))}
			}
		}
	} else {
		// –ï—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã TLS, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		optionsGrpc = []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}
	}
	return optionsGrpc, err // –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –æ–ø—Ü–∏–π gRPC –∏ –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—à–∏–±–∫–∏
}

// CreateServerGRPC —Å–æ–∑–¥–∞–µ—Ç gRPC —Å–µ—Ä–≤–µ—Ä —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
func CreateServerGRPC(certificateBaseCrtFilePath *string, certificateBaseKeyFilePath *string) (*grpc.Server, error) {
	// logrus.Info("üü® CreateServerGRPC")
	var err error
	var cert tls.Certificate
	var certPool *x509.CertPool

	// –ù–∞—á–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	serverOptions := []grpc.ServerOption{
		grpc.MaxRecvMsgSize(variables.MaxMsgGRPCSize),
		grpc.MaxSendMsgSize(variables.MaxMsgGRPCSize),
	}

	// –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
	if certificateBaseCrtFilePath != nil && certificateBaseKeyFilePath != nil {
		// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—É–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
		if certPool, err = x509.SystemCertPool(); err == nil {
			// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä—ã –∫–ª—é—á–µ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
			if cert, err = tls.LoadX509KeyPair(*certificateBaseCrtFilePath, *certificateBaseKeyFilePath); err == nil {
				// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ TLS —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
				tlsConfig := &tls.Config{
					Certificates: []tls.Certificate{cert},
					RootCAs:      certPool,
				}
				// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ TLS credentials –≤ –æ–ø—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
				serverOptions = append(serverOptions, grpc.Creds(credentials.NewTLS(tlsConfig)))
			}
		}
	}

	kaep := keepalive.EnforcementPolicy{
		MinTime:             5 * time.Minute, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É pings –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
		PermitWithoutStream: true,            // –†–∞–∑—Ä–µ—à–∏—Ç—å pings –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
	}
	kasp := keepalive.ServerParameters{
		MaxConnectionIdle:     15 * time.Minute, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		MaxConnectionAge:      30 * time.Minute, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		MaxConnectionAgeGrace: 5 * time.Minute,  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è MaxConnectionAge
		Time:                  5 * time.Minute,  // –í—Ä–µ–º—è –º–µ–∂–¥—É pings –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
		Timeout:               20 * time.Second, // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ ping
	}

	serverOptions = append(serverOptions,
		grpc.KeepaliveEnforcementPolicy(kaep),
		grpc.KeepaliveParams(kasp),
		grpc.MaxConcurrentStreams(100))

	// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ gRPC —Å–µ—Ä–≤–µ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
	return grpc.NewServer(serverOptions...), err
}
