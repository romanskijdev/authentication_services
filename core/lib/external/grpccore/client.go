package grpccore

import (
	"authentication_service/core/variables"
	"context"
	"log"
	"time"

	"google.golang.org/grpc/credentials/insecure"

	"google.golang.org/grpc"
	"google.golang.org/grpc/connectivity"
	healthpb "google.golang.org/grpc/health/grpc_health_v1"
)

func CreateDialOptionsProto() []grpc.DialOption {
	// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–±–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–ø—Ü–∏–π)
	var opts []grpc.DialOption
	opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))
	return opts
}

// —Å–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å gRPC —Å–µ—Ä–≤–µ—Ä–æ–º
func CreateClientConnects(opts []grpc.DialOption, baseUrl string, healthCheck bool) (*grpc.ClientConn, error) {
	// logrus.Info("üü® CreateClientConnects")
	ctx, cancel := context.WithTimeout(context.Background(), variables.ContextTimeoutBase)
	defer cancel()
	log.Println("üü° Connecting to gRPC server... ", baseUrl)
	maxSizeOption := grpc.WithDefaultCallOptions(grpc.MaxCallRecvMsgSize(variables.MaxMsgGRPCSize)) // –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ü–∏–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	opts = append(opts, maxSizeOption)                                                              // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π

	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å gRPC —Å–µ—Ä–≤–µ—Ä–æ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
	conn, err := grpc.NewClient(baseUrl, opts...)
	if err != nil {
		return nil, err // –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
	}

	if healthCheck {
		healthClient := healthpb.NewHealthClient(conn)
		ctxHealth, cancelHealth := context.WithTimeout(context.Background(), time.Second)
		defer cancelHealth()

		resp, err := healthClient.Check(ctxHealth, &healthpb.HealthCheckRequest{
			Service: "", // –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ü–µ–ª–æ–º
		})
		if err != nil {
			log.Println(" üî¥ error healthClient: ", err)
			return nil, err
		}

		log.Printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: %s", resp.Status)

		// –û–∂–∏–¥–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		for {
			state := conn.GetState()
			if state == connectivity.Ready {
				break // –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
			}
			if !conn.WaitForStateChange(ctx, state) {
				return nil, ctx.Err() // –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—ã–ª–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ
			}
			time.Sleep(1 * time.Second) // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		}
	}

	return conn, nil
}
