package gormmodule

import (
	"database/sql"
	"errors"
	"fmt"
	"log"
	"os"
	"sync"
	"time"

	"github.com/sirupsen/logrus"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

type ConfigConnectGorm struct {
	Host     string
	Port     string
	User     string
	Password string
	Name     string
	SslMode  string
}

var (
	gormDB *gorm.DB
	once   sync.Once
)

func connectGormDB(configObj *ConfigConnectGorm) (*gorm.DB, error) {
	if configObj == nil {
		return nil, errors.New("connectGormDB: configObj is nil")
	}

	log.Println("üöÄ ConnectGormDB")
	sslMode := "disable"
	if configObj.SslMode != "" {
		sslMode = configObj.SslMode
	}

	// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ disable –∏ require
	if sslMode != "disable" && sslMode != "require" {
		return nil, errors.New("ConnectDB: unsupported sslmode, only 'disable' and 'require' are allowed")
	}

	connStr := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=%s",
		configObj.Host,
		configObj.Port,
		configObj.User,
		configObj.Password,
		configObj.Name,
		sslMode)

	newLogger := logger.New(
		log.New(os.Stdout, "\r\n", log.LstdFlags), // io writer
		logger.Config{
			SlowThreshold:             time.Second,   // –º–µ–¥–ª–µ–Ω–Ω—ã–π SQL –ø–æ—Ä–æ–≥
			LogLevel:                  logger.Silent, // —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
			IgnoreRecordNotFoundError: true,          // –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
			Colorful:                  false,         // –æ—Ç–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç
		},
	)

	db, err := gorm.Open(postgres.Open(connStr), &gorm.Config{
		Logger: newLogger,
	})
	if err != nil {
		logrus.Errorf("üî¥ error: %s: %+v", "connectGormDB-Open", err)
		return nil, err
	}

	return db, nil
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö GORM —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Singleton
func GormDatabaseConnect(configObj *ConfigConnectGorm) (*gorm.DB, *sql.DB, error) {
	logrus.Info("üöÄ GormDatabaseConnect")
	if configObj == nil {
		return nil, nil, errors.New("configObj is nil")
	}

	var err error
	once.Do(func() {
		gormDB, err = connectGormDB(configObj)
	})

	if err != nil {
		return nil, nil, err
	}

	if gormDB == nil {
		return nil, nil, errors.New("failed to connect database: GormDB instance is nil")
	}

	sqlDB, err := gormDB.DB()
	if err != nil {
		return nil, nil, errors.New("failed to get DB from GORM")
	}

	// SetMaxIdleConns —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ –ø—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
	sqlDB.SetMaxIdleConns(2)

	// SetMaxOpenConns —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
	sqlDB.SetMaxOpenConns(10)

	// SetConnMaxLifetime —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
	sqlDB.SetConnMaxLifetime(5 * time.Minute)

	gormDB.Exec("CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";")
	return gormDB, sqlDB, nil
}

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö GORM
func GormDatabaseDisconnect() error {
	if gormDB == nil {
		return nil
	}

	sqlDB, err := gormDB.DB()
	if err != nil {
		return err
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	if err := sqlDB.Close(); err != nil {
		return fmt.Errorf("failed to close database connections: %w", err)
	}

	// –û—á–∏—â–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	sqlDB.SetMaxIdleConns(0)
	sqlDB.SetMaxOpenConns(0)

	// –û–±–Ω—É–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
	gormDB = nil
	return nil
}
