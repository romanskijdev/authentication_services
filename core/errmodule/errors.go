package errm

import (
	"fmt"
	"github.com/sirupsen/logrus"
)

// Error —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –æ—à–∏–±–∫–∏
type Error struct {
	Code        int    `json:"code"`        // –ö–æ–¥ –æ—à–∏–±–∫–∏
	Message     string `json:"messages"`    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
	Description string `json:"description"` // –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
	Error       error  `json:"error"`       // –í–ª–æ–∂–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
}

func NewError(message string, err error) *Error {
	if err == nil {
		return nil
	}
	code := 0
	description := message
	if err != nil {
		description = fmt.Sprintf("%s: %v", message, err)
	}

	logrus.Errorf("üî¥ newError: Error: %s, Description: %s, Error: %v", message, description, err)
	return &Error{
		Code:        code,
		Message:     message,
		Description: description,
		Error:       err,
	}
}
