#!/bin/bash
# üíÄ –¥–ª—è CRITICAL (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ) —É—è–∑–≤–∏–º–æ—Å—Ç–∏
# üî• –¥–ª—è HIGH (–≤—ã—Å–æ–∫–∏–µ) —É—è–∑–≤–∏–º–æ—Å—Ç–∏
# ‚ö†Ô∏è –¥–ª—è MEDIUM (—Å—Ä–µ–¥–Ω–∏–µ) —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
# ‚ÑπÔ∏è –¥–ª—è LOW (–Ω–∏–∑–∫–∏–µ) —É—è–∑–≤–∏–º–æ—Å—Ç–∏

set -e
trap 'echo "üî¥ –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; exit' SIGINT

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
SECURITY_REPORTS_DIR="${SCRIPT_DIR}/security_reports"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Å —Å–º–∞–π–ª–∞–º–∏
format_report() {
    local report_file=$1
    local output_file=$2
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
    local critical_file=$(mktemp)
    local high_file=$(mktemp)
    local medium_file=$(mktemp)
    local low_file=$(mktemp)
    local other_file=$(mktemp)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç—á–µ—Ç–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ñ–∞–π–ª–∞–º
    while IFS= read -r line; do
        if [[ $line =~ "CRITICAL" ]]; then
            echo "üíÄ $line" >> "$critical_file"
        elif [[ $line =~ "HIGH" ]]; then
            echo "üî• $line" >> "$high_file"
        elif [[ $line =~ "MEDIUM" ]]; then
            echo "‚ö†Ô∏è $line" >> "$medium_file"
        elif [[ $line =~ "LOW" ]]; then
            echo "‚ÑπÔ∏è $line" >> "$low_file"
        elif [[ $line =~ "Error" ]]; then
            echo "‚ùå $line" >> "$critical_file"
        elif [[ $line =~ "Warning" ]]; then
            echo "‚ö†Ô∏è $line" >> "$medium_file"
        else
            echo "$line" >> "$other_file"
        fi
    done < "$report_file"
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
    {
        echo "üïí –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (UTC): $(date -u '+%Y-%m-%d %H:%M:%S')"
        echo "======================================="
        echo
        echo "=== –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò ==="
        cat "$critical_file"
        echo
        echo "=== –í–´–°–û–ö–ò–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò ==="
        cat "$high_file"
        echo
        echo "=== –°–†–ï–î–ù–ò–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò ==="
        cat "$medium_file"
        echo
        echo "=== –ù–ò–ó–ö–ò–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò ==="
        cat "$low_file"
        echo
        echo "=== –î–†–£–ì–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ==="
        cat "$other_file"
    } > "$output_file"
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    rm -f "$critical_file" "$high_file" "$medium_file" "$low_file" "$other_file"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é gosec
scan_code() {
    local service_name=$1
    echo "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ $service_name –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏..."
    
    local service_reports_dir="${SECURITY_REPORTS_DIR}/${service_name}"
    mkdir -p "${service_reports_dir}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ gosec
    if ! command -v gosec &> /dev/null; then
        echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gosec..."
        go install github.com/securego/gosec/v2/cmd/gosec@latest
    fi
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    local temp_report="${service_reports_dir}/code_report.tmp"
    gosec -fmt=text -out="$temp_report" ./... || true
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å —Å–º–∞–π–ª–∞–º–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    format_report "$temp_report" "${service_reports_dir}/code_report.txt"
    rm -f "$temp_report"
    
    echo "üìù –û—Ç—á–µ—Ç –ø–æ –∫–æ–¥—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${service_reports_dir}/code_report.txt"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Docker –æ–±—Ä–∞–∑–∞
scan_image() {
    local image_name=$1
    local service_name=$2
    echo "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ $image_name –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏..."
    
    local service_reports_dir="${SECURITY_REPORTS_DIR}/${service_name}"
    mkdir -p "${service_reports_dir}"
    
    local temp_report="${service_reports_dir}/image_report.tmp"
    trivy image --severity HIGH,CRITICAL \
        --format table \
        --output "$temp_report" \
        "${image_name}" || true
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å —Å–º–∞–π–ª–∞–º–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    format_report "$temp_report" "${service_reports_dir}/image_report.txt"
    rm -f "$temp_report"
    
    echo "üìù –û—Ç—á–µ—Ç –ø–æ –æ–±—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${service_reports_dir}/image_report.txt"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–¥–µ
scan_secrets() {
    local service_name=$1
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ $service_name –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–¥–µ..."
    
    local service_reports_dir="${SECURITY_REPORTS_DIR}/${service_name}"
    mkdir -p "${service_reports_dir}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ gitleaks
    if ! command -v gitleaks &> /dev/null; then
        echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gitleaks..."
        go install github.com/zricethezav/gitleaks/v8@latest
    fi
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–æ–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
    local temp_report="${service_reports_dir}/secrets.tmp"
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∏–∑ .gitignore
    local gitignore_excludes=""
    if [ -f ".gitignore" ]; then
        gitignore_excludes=$(grep -v '^#' .gitignore | grep -v '^$' | sed 's/^/--exclude=/')
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º gitleaks —Å —É—á–µ—Ç–æ–º .gitignore
    gitleaks detect --source . --report-format json --no-git $gitignore_excludes --report-path "$temp_report" || true
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å —Å–º–∞–π–ª–∞–º–∏
    {
        echo "üïí –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (UTC): $(date -u '+%Y-%m-%d %H:%M:%S')"
        echo "======================================="
        echo
        echo "=== –ü–†–û–í–ï–†–ö–ê –ù–ê –°–ï–ö–†–ï–¢–´ –í –ö–û–î–ï ==="
        echo
        if [ -s "$temp_report" ]; then
            echo "üî¥ –û–ë–ù–ê–†–£–ñ–ï–ù–´ –°–ï–ö–†–ï–¢–´ –í –ö–û–î–ï!"
            echo "–¢–∏–ø—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤:"
            echo
            # –ü–∞—Ä—Å–∏–º JSON –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª—ã –∫ —Ä–∞–∑–Ω—ã–º —Ç–∏–ø–∞–º —Å–µ–∫—Ä–µ—Ç–æ–≤
            jq -r '.[] | select(.File | test("^[^/]+/")) | "\(.RuleID) - \(.Secret)\n–§–∞–π–ª: \(.File)\n–°—Ç—Ä–æ–∫–∞: \(.StartLine)\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: \(.Context)\n"' "$temp_report" | while IFS= read -r line; do
                if [[ $line =~ "API_KEY" ]]; then
                    echo "üîë $line"
                elif [[ $line =~ "PASSWORD" ]]; then
                    echo "üîê $line"
                elif [[ $line =~ "SECRET" ]]; then
                    echo "ü§´ $line"
                elif [[ $line =~ "TOKEN" ]]; then
                    echo "üé´ $line"
                elif [[ $line =~ "PRIVATE_KEY" ]]; then
                    echo "üîè $line"
                elif [[ $line =~ "CREDENTIAL" ]]; then
                    echo "üìù $line"
                elif [[ $line =~ ^–§–∞–π–ª: ]]; then
                    echo "üìÑ $line"
                elif [[ $line =~ ^–°—Ç—Ä–æ–∫–∞: ]]; then
                    echo "üìè $line"
                elif [[ $line =~ ^–ö–æ–Ω—Ç–µ–∫—Å—Ç: ]]; then
                    echo "üìã $line"
                    echo "----------------------------------------"
                else
                    echo "‚ö†Ô∏è $line"
                fi
            done
        else
            echo "üü¢ –°–µ–∫—Ä–µ—Ç—ã –≤ –∫–æ–¥–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
        fi
    } > "${service_reports_dir}/secrets_report.txt"
    
    rm -f "$temp_report"
    echo "üìù –û—Ç—á–µ—Ç –ø–æ —Å–µ–∫—Ä–µ—Ç–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${service_reports_dir}/secrets_report.txt"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ core
build_core() {
    local service_name=$1
    echo "üß° $service_name"
    gofmt -w .
    if go mod tidy && go mod vendor && go vet ./...; then
        echo "üü¢ $service_name —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω"
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è core
        scan_code $service_name
        scan_secrets $service_name
    else
        echo "üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ $service_name"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
build_service() {
    local service_name=$1
    echo "üß° $service_name"
    gofmt -w .
    if go mod tidy && go mod vendor && go vet ./...; then
        echo "üü¢ $service_name —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω"
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–æ–¥ –∏ —Å–µ–∫—Ä–µ—Ç—ã
        scan_code $service_name
        scan_secrets $service_name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Dockerfile.serv
        if [ ! -f "Dockerfile" ]; then
            echo "‚ö†Ô∏è –§–∞–π–ª Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $(pwd)"
            return 0
        fi
        
        # –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º BuildKit
        echo "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
        DOCKER_BUILDKIT=1 docker build \
            --progress=plain \
            --build-arg APP_NAME="${service_name}_app" \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t "${service_name}_i" \
            -f Dockerfile .
        
        if [ $? -eq 0 ]; then
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–∑ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
            scan_image "${service_name}_i" "$service_name"
        else
            echo "üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ Docker –æ–±—Ä–∞–∑–∞"
        fi
    else
        echo "üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ $service_name"
        return 1
    fi
}

# –í–∫–ª—é—á–∞–µ–º BuildKit
export DOCKER_BUILDKIT=1

cd core
./build_proto.sh
build_core "core"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è core

echo "üß° ls: "
ls

cd ../services

cd admin_service
build_service "admin_service"

cd ../notification_service
build_service "notification_service"

cd ../payment_service
build_service "payment_service"

cd ../system-service
build_service "system-service"

cd ../tariff-service
build_service "tariff-service"

cd ../telegram_service
build_service "telegram_service"

cd ../user-service
build_service "user-service"

cd ../w-imap-service
build_service "w-imap-service"

cd ../w-smtp-service
build_service "w-smtp-service"

echo "üü¢ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞
echo "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞..."
{
    echo "=== –û—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ $(date) ==="
    echo "======================================="
    echo
    echo "=== –ê–ù–ê–õ–ò–ó CORE ==="
    if [ -f "${SECURITY_REPORTS_DIR}/core/code_report.txt" ]; then
        cat "${SECURITY_REPORTS_DIR}/core/code_report.txt"
    fi
    if [ -f "${SECURITY_REPORTS_DIR}/core/secrets_report.txt" ]; then
        cat "${SECURITY_REPORTS_DIR}/core/secrets_report.txt"
    fi
    echo "----------------------------------------"
    
    for service in admin_service notification_service payment_service system-service tariff-service telegram_service user-service w-imap-service w-smtp-service; do
        echo "=== $service ==="
        echo "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:"
        if [ -f "${SECURITY_REPORTS_DIR}/${service}/code_report.txt" ]; then
            cat "${SECURITY_REPORTS_DIR}/${service}/code_report.txt"
        fi
        echo "–ê–Ω–∞–ª–∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤:"
        if [ -f "${SECURITY_REPORTS_DIR}/${service}/secrets_report.txt" ]; then
            cat "${SECURITY_REPORTS_DIR}/${service}/secrets_report.txt"
        fi
        echo "–ê–Ω–∞–ª–∏–∑ Docker –æ–±—Ä–∞–∑–∞:"
        if [ -f "${SECURITY_REPORTS_DIR}/${service}/image_report.txt" ]; then
            cat "${SECURITY_REPORTS_DIR}/${service}/image_report.txt"
        fi
        echo "----------------------------------------"
    done
} > "${SECURITY_REPORTS_DIR}/full_security_report.txt"

echo "üìù –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ ${SECURITY_REPORTS_DIR}/full_security_report.txt"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∏ —Å–µ–∫—Ä–µ—Ç—ã
if grep -q "üíÄ\|üî•\|üî¥ –û–ë–ù–ê–†–£–ñ–ï–ù–´ –°–ï–ö–†–ï–¢–´ –í –ö–û–î–ï" "${SECURITY_REPORTS_DIR}/full_security_report.txt"; then
    echo "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–ª–∏ –≤—ã—Å–æ–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∏–ª–∏ —Å–µ–∫—Ä–µ—Ç—ã –≤ –∫–æ–¥–µ!"
    echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –∏ –ø—Ä–∏–º–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ä—ã"
fi